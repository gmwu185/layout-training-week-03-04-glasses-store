/*----------  tools  ----------*/
/**
 * 參考來源：
 * https://github.com/twbs/bootstrap/blob/master/scss/_utilities.scss
 */
$grid-breakpoints: (
  xs: 0,
  sm: 375px,
  md: 672px,
  lg: 1280px
) !default;

$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge(
  (
    0: 0,
    1: $spacer * .25,   // 16*0.25 = 4px
    2: $spacer * .5,    // 16*0.5 = 8px
    3: $spacer * .75,   // 16*0.57 = 12px
    4: $spacer,         // 16px
    5: $spacer * 1.25,  // 16*1.25 = 20px
    6: $spacer * 1.5,   // 16*1.5 = 24px
    7: $spacer * 1.75,  // 16*1.75 = 28px
    8: $spacer * 2,     // 16*2 = 32px
    9: $spacer * 2.25,  // 16*2.25 = 36px
    10: $spacer * 2.5,  // 16*2.5 = 40px
    11: $spacer * 2.75, // 16*2.75 = 44px
    12: $spacer * 3,    // 16*3 = 48px
    13: $spacer * 3.25, // 16*3.25 = 52px
    14: $spacer * 3.5,  // 16*3.5= 56px
    15: $spacer * 3.75, // 16*3.75= 60px
    16: $spacer * 4,    // 16*4= 64px
    17: $spacer * 4.25, // 16*4.25 = 68px
    18: $spacer * 4.5,  // 16*4.5 = 72px
    19: $spacer * 4.75, // 16*4.75 = 76px
    20: $spacer * 5,    // 16*5 = 80px
  ),
  $spacers
);


// /**
//  *
//  *  # 設定順序
//     1. 設定變數名，例如 "position" ，變數名可自定
//     2. 設定 () 內參數
//     3. class: p, -> 樣式名稱前綴
//     4. responsive: true, -> 是否使用自適應斷點樣式
//     5. property: position, -> CSS 內的屬性名稱
//     6. values: static -> CSS 屬性值
//  *
//  */

$utilities: () !default;
$utilities: map-merge(
  (
    "textAlign": (
      property: text-align,
      responsive: true,
      class: u-textAlign,
      values: center right left
    ),
    "verticalAlign": (
      property: vertical-align,
      class: u-verticalAlign,
      values: baseline top middle bottom text-bottom text-top
    ),
    // border
    "border": (
      property: border,
      class: u-border,
      values: (
        null: 1px solid,
        0: 0,
      )
    ),
    "border-top": (
      property: border-top,
      class: u-borderTop,
      values: (
        null: 1px solid,
        0: 0,
      )
    ),
    "border-right": (
      property: border-right,
      class: u-borderRight,
      values: (
        null: 1px solid,
        0: 0,
      )
    ),
    "border-bottom": (
      property: border-bottom,
      class: u-borderBottom,
      values: (
        null: 1px solid,
        0: 0,
      )
    ),
    "border-left": (
      property: border-left,
      class: u-borderLeft,
      values: (
        null: 1px solid,
        0: 0,
      )
    ),
    "display": (
      responsive: true,
      print: true,
      property: display,
      class: u-d,
      values: none inline inline-block block table flex inline-flex
    ),
    // Flex
    // "flex": (
    //   responsive: true,
    //   property: flex,
    //   values: (fill: 1 1 auto)
    // ),
    "flex-direction": (
      responsive: true,
      property: flex-direction,
      class: u-flexDirection,
      values: row column row-reverse column-reverse
    ),
    // "flex-grow": (
    //   responsive: true,
    //   property: flex-grow,
    //   class: u-flex,
    //   values: (
    //     grow-0: 0,
    //     grow-1: 1,
    //   )
    // ),
    // "flex-shrink": (
    //   responsive: true,
    //   property: flex-shrink,
    //   class: u-flex,
    //   values: (
    //     shrink-0: 0,
    //     shrink-1: 1,
    //   )
    // ),
    "flex-wrap": (
      responsive: true,
      property: flex-wrap,
      class: u-flexWrap,
      values: wrap nowrap wrap-reverse
    ),
    "justify-content": (
      responsive: true,
      property: justify-content,
      class: u-justifyContent,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
      )
    ),
    "align-items": (
      responsive: true,
      property: align-items,
      class: u-alignItems,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        baseline: baseline,
        stretch: stretch,
      )
    ),
    "align-content": (
      responsive: true,
      property: align-content,
      class: u-alignContent,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        stretch: stretch,
      )
    ),
    "align-self": (
      responsive: true,
      property: align-self,
      class: u-alignSelf,
      values: (
        auto: auto,
        start: flex-start,
        end: flex-end,
        center: center,
        baseline: baseline,
        stretch: stretch,
      )
    ),
    "order": (
      responsive: true,
      property: order,
      class: u-order,
      values: (
        first: -1,
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        last: 6,
      ),
    ),
    // Margin
    "margin": (
      responsive: true,
      property: margin,
      class: u-m,
      values: map-merge($spacers, (auto: auto))
    ),
    "margin-x": (
      responsive: true,
      property: margin-right margin-left,
      class: u-mx,
      values: map-merge($spacers, (auto: auto))
    ),
    "margin-y": (
      responsive: true,
      property: margin-top margin-bottom,
      class: u-my,
      values: map-merge($spacers, (auto: auto))
    ),
    "margin-top": (
      responsive: true,
      property: margin-top,
      class: u-mt,
      values: map-merge($spacers, (auto: auto))
    ),
    "margin-right": (
      responsive: true,
      property: margin-right,
      class: u-mr,
      values: map-merge($spacers, (auto: auto))
    ),
    "margin-bottom": (
      responsive: true,
      property: margin-bottom,
      class: u-mb,
      values: map-merge($spacers, (auto: auto))
    ),
    "margin-left": (
      responsive: true,
      property: margin-left,
      class: u-ml,
      values: map-merge($spacers, (auto: auto))
    ),
    // Padding
    "padding": (
      responsive: true,
      property: padding,
      class: u-p,
      values: $spacers
    ),
    "padding-x": (
      responsive: true,
      property: padding-right padding-left,
      class: u-px,
      values: $spacers
    ),
    "padding-y": (
      responsive: true,
      property: padding-top padding-bottom,
      class: u-py,
      values: $spacers
    ),
    "padding-top": (
      responsive: true,
      property: padding-top,
      class: u-pt,
      values: $spacers
    ),
    "padding-right": (
      responsive: true,
      property: padding-right,
      class: u-pr,
      values: $spacers
    ),
    "padding-bottom": (
      responsive: true,
      property: padding-bottom,
      class: u-pb,
      values: $spacers
    ),
    "padding-left": (
      responsive: true,
      property: padding-left,
      class: u-pl,
      values: $spacers
    ),
  ),
  $utilities
);
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@mixin generate-utility($utility, $infix) {
  $values: map-get($utility, values);
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }
  @each $value in $values {
    $properties: map-get($utility, property);
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }
    $property-class: map-get($utility, class);
    $property-class: if($property-class, $property-class, nth($properties, 1));
    $property-class-modifier: if(nth($value, 1), "--" + nth($value, 1), "");
    .#{$property-class + $infix + $property-class-modifier} {
      @each $property in $properties {
        // #{$property}: #{nth($value, 2)} !important;
        #{$property}: #{nth($value, 2)} ;
      }
    }
  }
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $key, $utility in $utilities {
      @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
        @include generate-utility($utility, $infix);
      }
    }
  }
}
/*----------  /tools  ----------*/